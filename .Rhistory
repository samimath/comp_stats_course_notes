y <- sin(x) + rnorm(length(x),0,0.5)
z <- sin(x) + sin(y) + rnorm(length(x),0,0.5)
# 2 d plot
plot(x,y,col = 'grey')
points(x,sin(x),col='blue',type ='l',lwd = 2)
nclr <- 10 # number of colors
plotclr <- brewer.pal(nclr,"Spectral") # get the colors
colornum <- cut(rank(z), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
# scatter plot
plot.angle <- 60
scatterplot3d(x,y,z, type="h", angle=plot.angle, color = colcode, pch=20, cex.symbols=2,
col.axis="gray", col.grid="gray")
library(plotly)
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = ~volcano)
fig <- fig %>% add_surface()
fig
### Example of multivariate smoothing using additive models:
## INITIAL VALUES
norwaypaper.dat = read.table('datasets/norwaypaper.dat',header = TRUE)
y  = norwaypaper.dat$negy5
x1 = norwaypaper.dat$x1
x2 = norwaypaper.dat$x3
new.data<-data.frame(y=y,x1=x1,x2=x2)
nclr <- 7 # number of colors
plotclr <- brewer.pal(nclr,"BuPu") # get the colors
colornum <- cut(rank(y), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
plot.angle <- 60
scatterplot3d(x1,x2,y, type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
scatterplot3d(x1,x2,fitted(lmodel), type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
scatterplot3d(x1,x2,fitted(gamodel$fit), type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
## MAIN
lmodel  = lm(y~x1+x2, data = new.data)
gamodel <-gam(y ~s(x1) + s(x2), data = new.data)
## OUTPUT
summary(lmodel)       # SUMMARY OF LINEAR MODEL FIT
summary(gamodel)      # SUMMARY OF GAM FIT
## OUTPUT PLOTS
## first,implement bivariate interpolation onto a grid for irregularly spaced input data
h.data = h.lm  = interp(x1,x2,y)
h.lm  = interp(x1,x2,fitted(lmodel))
h.gam = interp(x1,x2,fitted(gamodel))
#
fig.data <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.data$z) %>% add_surface() %>% layout(title = "Data")
fig.lm <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.lm$z) %>% add_surface() %>% layout(title = "Ordinary Linear Model")
fig.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z) %>% add_surface()%>% layout(title = "Generalized Additive Model")
## below are the plots:
fig.data
fig.lm
fig.gam
### VISUALIZING THE ADDITIVE EFFECT
par(mfrow = c(1,2))
visreg(gamodel, xvar = c("x1"),data = new.data,main = 'S(X1)')
visreg(gamodel, xvar = c("x2"),data = new.data, main = 'S(X2)')
gamodel.check()
gam.check()
gam.check(gamodel)
gamodel <-gam(y ~s(x1) + s(x2), data = new.data, method = 'REML')
lmodel  = lm(y~x1+x2, data = new.data)
gamodel <-gam(y ~s(x1) + s(x2), data = new.data, method = 'REML')
## OUTPUT
summary(lmodel)       # SUMMARY OF LINEAR MODEL FIT
summary(gamodel)      # SUMMARY OF GAM FIT
## OUTPUT PLOTS
## first,implement bivariate interpolation onto a grid for irregularly spaced input data
h.data = h.lm  = interp(x1,x2,y)
h.lm  = interp(x1,x2,fitted(lmodel))
h.gam = interp(x1,x2,fitted(gamodel))
#
fig.data <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.data$z) %>% add_surface() %>% layout(title = "Data")
fig.lm <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.lm$z) %>% add_surface() %>% layout(title = "Ordinary Linear Model")
fig.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z) %>% add_surface()%>% layout(title = "Generalized Additive Model")
## below are the plots:
fig.data
fig.lm
fig.gam
### VISUALIZING THE ADDITIVE EFFECT
par(mfrow = c(1,2))
visreg(gamodel, xvar = c("x1"),data = new.data,main = 'S(X1)')
visreg(gamodel, xvar = c("x2"),data = new.data, main = 'S(X2)')
par(mfrow = c(1,2))
visreg(gamodel, xvar = c("x1"),data = new.data,main = 'S(X1)')
visreg(gamodel, xvar = c("x2"),data = new.data, main = 'S(X2)')
############################################################################
# COMPUTATIONAL STATISTICS
# by Geof Givens and Jennifer Hoeting
# CHAPTER 11 EXAMPLES (last update 10/1/2012)
############################################################################
### EXAMPLE 11.1-2 EASY DATA
############################################################################
# easy = observed data
# x    = observed predictor data
# y    = observed response data
# tma  = truncated neighborhood moving average (for k odd)
############################################################################
## INITIAL VALUES
easy <- read.table('datasets/easysmooth.dat',header=T)
x    = easy$X
y    = easy$Y
## FUNCTIONS
## Smoothing function
TMA = function(k,y){
# get number of observations
n = length(y)
# initiate smoothing matrix
S = matrix(0,n,n)
# index for points below x_i
b = (k-1)/2
if(k>1){
# assign coefficient for smoothing matrix
for(i in 1:b){
S[i,1:(b+i)] = 1/(k-b+i-1)
S[n-i+1,(n-b-i+1):n] = 1/(k-b+i-1)
}
for(i in (b+1):(n-b)){
S[i,(i-b):(i+b)] = 1/k
}}
if(k==1){S = diag(1,n)}
out = S%*%y
return(out)
}
## MAIN
s3  = TMA(5,y)
s13 = TMA(13,y)
s43 = TMA(43,y)
## OUTPUT PLOTS
s = function(x){(x^3) * sin((x+3.4)/2)}
x.plot = seq(min(x),max(x),length.out=1000)
y.plot = s(x.plot)
plot(x,y,xlab="Predictor",ylab="Response", col = 'darkgrey')
lines(x.plot,y.plot,lwd = 2)
lines(x,s3, col = 'blue',lty = 2, lwd = 1.5)
lines(x,s13,col = 'forestgreen',lty =2,lwd = 1.5)
lines(x,s43,col = 'orange',lty = 2, lwd = 1.5)
legend("bottomright",c("True relation","k=4","k=13","k=43"),
lty=c(1,2,2,2), col = c('black','blue','forestgreen','orange'))
k    = seq(3,51,by=2)
## FUNCTIONS
CVRSS = function(k,y){
n = length(y)
S = matrix(0,n,n)
b = (k-1)/2
if(k>1){
for(i in 1:b){
S[i,1:(b+i)] = 1/(k-b+i-1)
S[n-i+1,(n-b-i+1):n] = 1/(k-b+i-1)
}
for(i in (b+1):(n-b)){
S[i,(i-b):(i+b)] = 1/k
}}
if(k==1){S = diag(1,n)}
s.hat = S%*%y
out = sum(((y-s.hat)/(1-diag(S)))^2)
return(out)
}
## MAIN
cvrss.val = rep(0,length(k))
for(i in 1:25){
cvrss.val[i] = CVRSS(k[i],y)
}
## OUTPUT
cvrss.val      # CVRSS VALUES FOR k = 3,5,7,...,51
## OUTPUT PLOTS
plot(k,cvrss.val,type="b",lwd = 2, col = 'red')
points(k,cvrss.val,lwd = 2,type ='l', col = 'black')
## FUNCTIONS
# USES HAT MATRIX
## Running line smoother
RLSMOOTH1 = function(k,y,x){
n = length(y)
s.hat = rep(0,n)
b = (k-1)/2
if(k>1){
for(i in 1:(b+1)){
xi = x[1:(b+i)]
xi = cbind(rep(1,length(xi)),xi)
hi = xi%*%solve(t(xi)%*%xi)%*%t(xi)
s.hat[i] = y[1:(b+i)]%*%hi[i,]
xi = x[(n-b-i+1):n]
xi = cbind(rep(1,length(xi)),xi)
hi = xi%*%solve(t(xi)%*%xi)%*%t(xi)
s.hat[n-i+1] = y[(n-b-i+1):n]%*%hi[nrow(hi)-i+1,]
}
for(i in (b+2):(n-b-1)){
xi = x[(i-b):(i+b)]
xi = cbind(rep(1,length(xi)),xi)
hi = xi%*%solve(t(xi)%*%xi)%*%t(xi)
s.hat[i] = y[(i-b):(i+b)]%*%hi[b+1,]
}}
if(k==1){s.hat = y}
return(s.hat)
}
rlsmooth1.val = RLSMOOTH1(23,y,x)
## OUTPUT PLOTS
s = function(x){(x^3) * sin((x+3.4)/2)}
x.plot = seq(min(x),max(x),length.out=1000)
y.plot = s(x.plot)
plot(x,y,xlab="Predictor",ylab="Response", col = 'darkgrey', main = 'running-line smoother (k = 23)')
lines(x.plot,y.plot,lty=1, lwd = 2)
lines(x,rlsmooth1.val,type="l", col = 'blue', lwd =2)
### Kernel smoother
## FUNCTIONS
fx.hat = function(z,h){dnorm((z-x)/h)/h}
KSMOOTH = function(h,y,x){
n = length(y)
s.hat = rep(0,n)
for(i in 1:n){
a = fx.hat(x[i],h)
s.hat[i] = sum(y * a/sum(a))
}
return(s.hat)
}
h    = 0.16
## MAIN
ksmooth.val = KSMOOTH(h,y,x)
## OUTPUT PLOTS
s = function(x){(x^3) * sin((x+3.4)/2)}
x.plot = seq(min(x),max(x),length.out=1000)
y.plot = s(x.plot)
plot(x,y,xlab="Predictor",ylab="Response",col = 'darkgrey', main = 'kernel smoother (h = 0.16)')
lines(x.plot,y.plot,lty=1, lwd = 2)
lines(x,ksmooth.val,type="l", col = 'blue', lwd =2)
fig.data <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.data$z) %>% add_surface() %>% layout(title = "Data")
fig.lm <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.lm$z) %>% add_surface() %>% layout(title = "Ordinary Linear Model")
fig.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z) %>% add_surface()%>% layout(title = "Generalized Additive Model")
fig.data
fig.lm
fig.gam
fig.res.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z -h.data$z) %>% add_surface()%>% layout(title = "Difference between data and GAM")
fig.res.gam
hist(h.gam$z - h.data$z)
hist(h.lm$z - h.data$z)
par(mfrow = c(1,2))
hist(h.lm$z - h.data$z)
hist(h.gam$z - h.data$z)
par(mfrow = c(1,2))
hist(h.lm$z - h.data$z,main = 'Difference between data and linear model fit')
hist(h.gam$z - h.data$z,main = 'Difference between data and additive model fit')
hist(h.lm$z - h.data$z,main = 'Difference between data \n and linear model fit')
par(mfrow = c(1,2))
hist(h.lm$z - h.data$z,main = 'Difference between data \n and linear model fit')
hist(h.gam$z - h.data$z,main = 'Difference between data \n and additive model fit')
lmodel  = lm(y~x1+x2, data = new.data)
gamodel <-gam(y ~s(x1) + s(x2), data = new.data,family = 'gaussian', method = 'REML')
par(mfrow = c(1,2))
visreg(lmodel, xvar = c("x1"),data = new.data,main = 'X1')
visreg(lmodel, xvar = c("x2"),data = new.data, main = 'X2')
drugabuse.dat = read.table('datasets/drugabuse.dat',header=T)
y  = drugabuse.dat$drugfree
x1 = drugabuse.dat$numtreatments
x2 = drugabuse.dat$age
gamodel = gam(y~s(x1)+s(x2),family="binomial")
summary(gamodel)      # SUMMARY OF MODEL FIT
gamodel.drug = gam(y~s(x1)+s(x2),family="binomial")
## OUTPUT
summary(gamodel.drug)
h.gam.drug = interp(x1,x2,fitted(gamodel.drug),duplicate="strip")
persp(h.gam.drug,theta=30,phi=15,ticktype="detailed",expand=0.5,
xlab="x1",ylab="x2",zlab="P[drug-free]",
main="Generalized Additive Model")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
view(drugabuse.dat)
View(drugabuse.dat)
head(drugabuse.dat)
ggplot(data = drugabuse.dat) + geom_bar(aes(x=numtreatments))
ggplot(data = drugabuse.dat) + geom_bar(aes(x=numtreatments, fill = drugfree))
ggplot(data = drugabuse.dat) + geom_bar(aes(x=numtreatments, col = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_bar(aes(x=numtreatments, fill = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_bar(aes(x=age, fill = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_density(aes(x=age, fill = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree), alpha = 0.8))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)), alpha = 0.8)
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)), alpha = 0.5)
ggplot(data = drugabuse.dat) + geom_density(aes(x=age, fill = as.factor(drugfree)), alpha = 0.5)
ggplot(data = drugabuse.dat) + geom_point(aes(x = age, y = log(drugfree/(1-drugfree))))
drugabuse.dat$ynew = log(drugabuse.dat$drugfree/(1-drugabuse.dat$drugfree)+0.0001)
hist(drugabuse.dat$ynew)
head(drugabuse.dat$ynew)
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("age"),data = new.data,main = 'X1')
visreg(gamodel.drug , xvar = c("numtreatments"),data = new.data, main = 'X2')
visreg(gamodel.drug , xvar = c("age"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("numtreatments"),data = drugabuse.dat, main = 'X2')
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("age"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("numtreatments"),data = drugabuse.dat, main = 'X2')
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)), alpha = 0.5)
ggplot(data = drugabuse.dat) + geom_density(aes(x=age, fill = as.factor(drugfree)), alpha = 0.5)
par(mfrow = c(1,2))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)), alpha = 0.5)
ggplot(data = drugabuse.dat) + geom_density(aes(x=age, fill = as.factor(drugfree)), alpha = 0.5)
summary(gamodel.drug)
gamodel.drug$coefficients
gamodel.drug$linear.predictors
hist(gamodel.drug$linear.predictors)
summary(gamodel.drug)      # SUMMARY OF MODEL FIT
## OUTPUT PLOTS
h.gam.drug = interp(x1,x2,fitted(gamodel.drug),duplicate="strip")
persp(h.gam.drug,theta=30,phi=15,ticktype="detailed",expand=0.5,
xlab="x1",ylab="x2",zlab="P[drug-free]",
main="Generalized Additive Model")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
gamodel.drug$fitted.values
h.gam.drug$z
require(scatterplot3d)
require(RColorBrewer)
require(plot3D)
library(ggplot2)
library(mgcv)
library(visreg)
library(akima)
library(plotly)
# generate some random geospatial data:
x <- seq(from = -3, to = 3, by = 0.05)
y <- sin(x) + rnorm(length(x),0,0.5)
z <- sin(x) + sin(y) + rnorm(length(x),0,0.5)
# 2 d plot
plot(x,y,col = 'grey')
points(x,sin(x),col='blue',type ='l',lwd = 2)
nclr <- 10 # number of colors
plotclr <- brewer.pal(nclr,"Spectral") # get the colors
colornum <- cut(rank(z), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
# scatter plot
plot.angle <- 60
scatterplot3d(x,y,z, type="h", angle=plot.angle, color = colcode, pch=20, cex.symbols=2,
col.axis="gray", col.grid="gray")
# volcano is a numeric matrix that ships with R
fig <- plot_ly(z = ~volcano)
fig <- fig %>% add_surface()
fig
### Example of multivariate smoothing using additive models:
## INITIAL VALUES
norwaypaper.dat = read.table('datasets/norwaypaper.dat',header = TRUE)
y  = norwaypaper.dat$negy5
x1 = norwaypaper.dat$x1
x2 = norwaypaper.dat$x3
new.data<-data.frame(y=y,x1=x1,x2=x2)
nclr <- 7 # number of colors
plotclr <- brewer.pal(nclr,"BuPu") # get the colors
colornum <- cut(rank(y), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
plot.angle <- 60
scatterplot3d(x1,x2,y, type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
scatterplot3d(x1,x2,fitted(lmodel), type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
scatterplot3d(x1,x2,fitted(gamodel$fit), type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
## MAIN
## general linear model
lmodel  = lm(y~x1+x2, data = new.data)
## additive model with a smoothing function
gamodel <-gam(y ~s(x1) + s(x2), data = new.data,family = 'gaussian', method = 'REML')
## OUTPUT
summary(lmodel)       # SUMMARY OF LINEAR MODEL FIT
summary(gamodel)      # SUMMARY OF GAM FIT
## OUTPUT PLOTS
## first,implement bivariate interpolation onto a grid for irregularly spaced input data
h.data = h.lm  = interp(x1,x2,y)
h.lm  = interp(x1,x2,fitted(lmodel))
h.gam = interp(x1,x2,fitted(gamodel))
#
fig.data <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.data$z) %>% add_surface() %>% layout(title = "Data")
fig.lm <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.lm$z) %>% add_surface() %>% layout(title = "Ordinary Linear Model")
fig.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z) %>% add_surface()%>% layout(title = "Generalized Additive Model")
## below are the plots:
fig.data
fig.lm
fig.gam
### VISUALIZING THE ADDITIVE EFFECT
par(mfrow = c(1,2))
visreg(gamodel, xvar = c("x1"),data = new.data,main = 'S(X1)')
visreg(gamodel, xvar = c("x2"),data = new.data, main = 'S(X2)')
par(mfrow = c(1,2))
visreg(lmodel, xvar = c("x1"),data = new.data,main = 'X1')
visreg(lmodel, xvar = c("x2"),data = new.data, main = 'X2')
### VISUALIZING THE ERROR TERM:
par(mfrow = c(1,2))
hist(h.lm$z - h.data$z,main = 'Difference between data \n and linear model fit')
hist(h.gam$z - h.data$z,main = 'Difference between data \n and additive model fit')
### DRUG ABUSE DATA EXAMPLE
## INITIAL VALUES
drugabuse.dat = read.table('datasets/drugabuse.dat',header=T)
y  = drugabuse.dat$drugfree
x1 = drugabuse.dat$numtreatments
x2 = drugabuse.dat$age
## visualizing the data:
par(mfrow = c(1,2))
ggplot(data = drugabuse.dat) + geom_density(aes(x=numtreatments, fill = as.factor(drugfree)), alpha = 0.5)
ggplot(data = drugabuse.dat) + geom_density(aes(x=age, fill = as.factor(drugfree)), alpha = 0.5)
## MAIN
gamodel.drug = gam(y~s(x1)+s(x2),family="binomial")
## OUTPUT
summary(gamodel.drug)      # SUMMARY OF MODEL FIT
## OUTPUT PLOTS
h.gam.drug = interp(x1,x2,fitted(gamodel.drug),duplicate="strip")
persp(h.gam.drug,theta=30,phi=15,ticktype="detailed",expand=0.5,
xlab="x1",ylab="x2",zlab="P[drug-free]",
main="Generalized Additive Model")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
## INITIAL VALUES
norwaypaper.dat = read.table('datasets/norwaypaper.dat',header = TRUE)
y  = norwaypaper.dat$negy5
x1 = norwaypaper.dat$x1
x2 = norwaypaper.dat$x3
new.data<-data.frame(y=y,x1=x1,x2=x2)
nclr <- 7 # number of colors
plotclr <- brewer.pal(nclr,"BuPu") # get the colors
colornum <- cut(rank(y), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
plot.angle <- 60
scatterplot3d(x1,x2,y, type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
nclr <- 7 # number of colors
plotclr <- brewer.pal(nclr,"BuPu") # get the colors
colornum <- cut(rank(y), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
plot.angle <- 60
scatterplot3d(x1,x2,y, type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
nclr <- 7 # number of colors
plotclr <- brewer.pal(nclr,"BuPu") # get the colors
colornum <- cut(rank(y), nclr, labels=FALSE)
colcode <- plotclr[colornum] # assign color
plot.angle <- 60
scatterplot3d(x1,x2,y, type="h", angle=plot.angle, color = colcode,
col.axis="gray", col.grid="gray")
## general linear model
lmodel  = lm(y~x1+x2, data = new.data)
summary(lmodel)
gamodel <-gam(y ~s(x1) + s(x2), data = new.data,family = 'gaussian', method = 'REML')
## OUTPUT
summary(lmodel)       # SUMMARY OF LINEAR MODEL FIT
summary(gamodel)      # SUMMARY OF GAM FIT
## OUTPUT PLOTS
## first,implement bivariate interpolation onto a grid for irregularly spaced input data
h.data = h.lm  = interp(x1,x2,y)
h.lm  = interp(x1,x2,fitted(lmodel))
h.gam = interp(x1,x2,fitted(gamodel))
fig.data <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.data$z) %>% add_surface() %>% layout(title = "Data")
fig.data
fig.lm <- plot_ly(x = h.lm$x, y = h.lm$y, z = h.lm$z) %>% add_surface() %>% layout(title = "Ordinary Linear Model")
fig.lm
## additive model with a smoothing function
gamodel <-gam(y ~s(x1) + s(x2), data = new.data,family = 'gaussian', method = 'REML')
?gam
hist(new.data$y)
hist(norwaypaper.dat$negy5)
fig.gam <-plot_ly(x = h.gam$x, y = h.gam$y, z = h.gam$z) %>% add_surface()%>% layout(title = "Generalized Additive Model")
fig.gam
## Assuming response variable is binomial distributed
gamodel.drug = gam(y~s(x1)+s(x2),family="binomial")
## OUTPUT
summary(gamodel.drug)      # SUMMARY OF MODEL FIT
## OUTPUT PLOTS
h.gam.drug = interp(x1,x2,fitted(gamodel.drug),duplicate="strip")
persp(h.gam.drug,theta=30,phi=15,ticktype="detailed",expand=0.5,
xlab="x1",ylab="x2",zlab="P[drug-free]",
main="Generalized Additive Model")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
summary(gamodel.drug)      # SUMMARY OF MODEL FIT
## OUTPUT PLOTS
h.gam.drug = interp(x1,x2,fitted(gamodel.drug),duplicate="strip")
persp(h.gam.drug,theta=30,phi=15,ticktype="detailed",expand=0.5,
xlab="x1",ylab="x2",zlab="P[drug-free]",
main="Generalized Additive Model")
plot_ly(x = h.gam.drug$x, y = h.gam.drug$y, z = h.gam.drug$z) %>% add_surface()%>% layout(title = "Generalized Additive Model\n (Drug data example)")
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
par(mfrow = c(1,2))
visreg(gamodel.drug , xvar = c("x1"),data = drugabuse.dat,main = 'X1')
visreg(gamodel.drug , xvar = c("x2"),data = drugabuse.dat, main = 'X2')
?visreg
library(sqldf)
install.packages('sqldf')
library(sqldf)
library(dplyr)
library(ggplot2)
library(corrplot)
install.packages('corrplot')
library(sqldf)
library(dplyr)
library(ggplot2)
library(corrplot)
library(Hmisc)
install.packages('Hmisc')
install.packages('Boruta')
install.packages('mlbench')
install.packages('caret')
