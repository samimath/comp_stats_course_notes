View(datasets::airquality)
aq <- datasets::airquality
plot(aq$Temp,aq$Ozone)
?datasets::airquality
aq <- datasets::airquality
hist(aq$Ozone)
hist(aq$Ozone,breaks = 10)
hist(aq$Ozone,breaks = 15)
KernSmooth::bkde(aq$Ozone,kernel = 'normal', bandwidth = 0.5)
KernSmooth::bkde(aq$Ozone,kernel = 'normal')
KernSmooth::bkde(aq$Ozone,kernel = 'normal',canonical = T)
KernSmooth::bkde(aq$Ozone,kernel = 'normal',gridsize = 10)
?KernSmooth::bkde
## Kernel density function examples
## Gausian
K.gaussian <- function(u){
(1/sqrt(2*pi))*exp(-u^2/2)
}
K.gaussian <-Vectorize(K.gaussian,'u')
## Sigmoid
K.sigmoid <- function(u){
(2/pi)*(1/(exp(u)+exp(-u)))
}
## Logistic
K.logistic<- function(u){
1/(exp(u)+exp(-u)+2)
}
u<-seq(-3,3,by = 0.01)
plot(u,K.gaussian(u),type = 'l',col ='blue',
lwd = 2, ylab = 'K(u)', xlab = 'u',main = '4 types of Kernel')
lines(u,K.sigmoid(u),col = 'red',lwd = 2)
lines(u,K.logistic(u),col = 'forestgreen', lwd =2)
lines(u,rep(1/6,length(u)),col = 'black',lwd=2)
legend(1.5,0.3,legend = c('Gaussian','Sigmoid','Logistic','Uniform'),
col = c('blue','red','forestgreen','black'),lty = c(2,2,2,2),
cex=.8)
set.seed(1)
# generate uniform random numbers
x <- runif(20)
par(mfrow = c(2,2))
hist(x)
# fit different types of kernel function
kde <- density(x, kernel = "gaussian",bw = 0.05)
plot(kde)
kde1 <- density(x, kernel = "gaussian",bw = 0.1)
plot(kde1)
kde2 <- density(x, kernel = "gaussian",bw = 0.5)
plot(kde2)
### finding optimal h using cross-validation:
kdenorm <- function(x,bw,q=NULL){
if(is.null(q)) {
q = seq(min(x)-3*bw, max(x)+3*bw, length.out=512)
}
nx = length(x)
print(nx)
nq = length(q)
print(nq)
# define X_i - x
xmat = matrix(q,nq,nx) - matrix(x,nq,nx,byrow=TRUE)
# define kernel function
denall = dnorm(xmat/bw) / bw
# define f hat
denhat = apply(denall,1,mean)
list(x=q, y=denhat, bw=bw)
}
intfun <- function(ix,x,bw){
kdenorm(x = x,bw = bw,q=ix)$y^2
}
### Defined unbiazed cross validation (UCV) criterion
kdecv <- function(bw,x){
lo = min(x)-3*bw
up = max(x)+3*bw
ival = integrate(intfun,x=x,bw=bw,lower=lo,upper=up)$value
nx = length(x)
ival - (2/(nx-1))*sum( kdenorm(x,bw,x)$y - dnorm(0)/(nx*bw) )
}
### test it with an example:
set.seed(1)
x = (1/3)*rnorm(100,mean = 4,sd = 3)+(2/3)*rnorm(100,mean = 10,sd = 6)
opt.bw <-optimize(kdecv,interval=c(0.05,1),x=x)$minimum
hist(x,freq = FALSE,col = 'lightgray')
lines(density(x, kernel = "gaussian",bw = opt.bw),col='blue',lwd = 2)
## Kernel density function examples
## Gausian
K.gaussian <- function(u){
(1/sqrt(2*pi))*exp(-u^2/2)
}
K.gaussian <-Vectorize(K.gaussian,'u')
## Sigmoid
K.sigmoid <- function(u){
(2/pi)*(1/(exp(u)+exp(-u)))
}
## Logistic
K.logistic<- function(u){
1/(exp(u)+exp(-u)+2)
}
u<-seq(-3,3,by = 0.01)
plot(u,K.gaussian(u),type = 'l',col ='blue',
lwd = 2, ylab = 'K(u)', xlab = 'u',main = '4 types of Kernel')
lines(u,K.sigmoid(u),col = 'red',lwd = 2)
lines(u,K.logistic(u),col = 'forestgreen', lwd =2)
lines(u,rep(1/6,length(u)),col = 'black',lwd=2)
kde.aq <-density(aq$Ozone,kernel = 'gaussian', bw = 0.5)
kde.aq <-density(na.rm(aq$Ozone),kernel = 'gaussian', bw = 0.5)
kde.aq <-density(na.omit(aq$Ozone),kernel = 'gaussian', bw = 0.5)
kde.aq <-density(na.omit(aq$Ozone),kernel = 'gaussian', bw = 0.5)
plot(kde.aq)
kde.aq <-density(na.omit(aq$Ozone),kernel = 'gaussian', bw = 1)
plot(kde.aq)
kde.aq <-density(na.omit(aq$Ozone),kernel = 'gaussian', bw = 2)
plot(kde.aq)
kde.aq <-density(na.omit(aq$Ozone),kernel = 'gaussian', bw = 4)
plot(kde.aq)
### test it with an example:
set.seed(1)
#x = (1/3)*rnorm(100,mean = 4,sd = 3)+(2/3)*rnorm(100,mean = 10,sd = 6)
x<-datasets::airquality$Ozone
opt.bw <-optimize(kdecv,interval=c(0.05,1),x=x)$minimum
### test it with an example:
set.seed(1)
#x = (1/3)*rnorm(100,mean = 4,sd = 3)+(2/3)*rnorm(100,mean = 10,sd = 6)
x<- na.omit(datasets::airquality$Ozone)
opt.bw <-optimize(kdecv,interval=c(0.05,1),x=x)$minimum
set.seed(1)
#x = (1/3)*rnorm(100,mean = 4,sd = 3)+(2/3)*rnorm(100,mean = 10,sd = 6)
x<- na.omit(datasets::airquality$Ozone)
opt.bw <-optimize(kdecv,interval=c(0.05,10),x=x)$minimum
hist(x,freq = FALSE,col = 'lightgray')
lines(density(x, kernel = "gaussian",bw = opt.bw),col='blue',lwd = 2)
opt.bw
length(aq)
length(aq$Ozone)
(1/153)^(1/5)
hist(x,freq = FALSE,col = 'lightgray',ylim = c(0,0.03))
lines(density(x, kernel = "gaussian",bw = opt.bw),col='blue',lwd = 2)
hist(x,freq = FALSE,col = 'lightgray',ylim = c(0,0.02))
lines(density(x, kernel = "gaussian",bw = opt.bw),col='blue',lwd = 2)
?dnorm
kdesignmoid <- function(x,bw,q=NULL){
if(is.null(q)) {
q = seq(min(x)-3*bw, max(x)+3*bw, length.out=512)
}
nx = length(x)
print(nx)
nq = length(q)
print(nq)
# define X_i - x
xmat = matrix(q,nq,nx) - matrix(x,nq,nx,byrow=TRUE)
# define kernel function
denall = K.sigmoid(xmat/bw) / bw
# define f hat
denhat = apply(denall,1,mean)
list(x=q, y=denhat, bw=bw)
}
intfun <- function(ix,x,bw){
kdesignmoid(x = x,bw = bw,q=ix)$y^2
}
### Defined unbiazed cross validation (UCV) criterion
kdecv <- function(bw,x){
lo = min(x)-3*bw
up = max(x)+3*bw
ival = integrate(intfun,x=x,bw=bw,lower=lo,upper=up)$value
nx = length(x)
ival - (2/(nx-1))*sum( kdenorm(x,bw,x)$y - dnorm(0)/(nx*bw) )
}
### test it with an example:
set.seed(1)
#x = (1/3)*rnorm(100,mean = 4,sd = 3)+(2/3)*rnorm(100,mean = 10,sd = 6)
x<- na.omit(datasets::airquality$Ozone)
opt.bw <-optimize(kdecv,interval=c(0.05,10),x=x)$minimum
opt.bw
?density
hist(x,freq = FALSE,col = 'lightgray',ylim = c(0,0.02))
lines(density(x, kernel = "gaussian",bw = opt.bw),col='blue',lwd = 2)
aq <- na.omit(datasets::airquality)
subset(aq)
subset(aq,Month = 9)
subset(aq,Month == 9)
subset(aq,'Month' == 9)
subset(aq,'Month' = 9)
subset(aq,'Month' == '9')
?subset
subset(aq, Month = 7)
with(airquality, subset(Ozone, Temp > 80))
with(airquality, subset(Month = 9))
subset(aq, Month == 7)
unique(aq$Month)
par(mfrow = c(2,3))
for(m in unique(aq$Month)){
aq.subset <- subset(aq, Month == m)
plot(aq.subset$Ozone ~ aq.subset$Temp)
}
par(mfrow = c(2,3))
for(m in unique(aq$Month)){
aq.subset <- subset(aq, Month == m)
plot(aq.subset$Ozone ~ aq.subset$Temp, lwd = 2)
}
plot(aq$Ozone~aq$Temp)
par(mfrow = c(2,3))
for(m in unique(aq$Month)){
i <-1
month <- c('May','June','July','Aug','Sept')
aq.subset <- subset(aq, Month == m)
plot(aq.subset$Ozone ~ aq.subset$Temp, lwd = 2, main = paste('Month of ',month[i]))
i<-i+1
}
plot(aq$Ozone~aq$Temp, main = paste('May - Sept'))
par(mfrow = c(2,3))
i <-1
for(m in unique(aq$Month)){
month <- c('May','June','July','Aug','Sept')
aq.subset <- subset(aq, Month == m)
plot(aq.subset$Ozone ~ aq.subset$Temp, lwd = 2, main = paste('Month of ',month[i]))
i<-i+1
}
plot(aq$Ozone~aq$Temp, main = paste('May - Sept'))
library(ggplot)
library(ggplot2)
install.packages('ggplot2')
par(mfrow = c(2,3))
i <-1
for(m in unique(aq$Month)){
month <- c('May','June','July','Aug','Sept')
aq.subset <- subset(aq, Month == m)
plot(aq.subset$Ozone ~ aq.subset$Temp, lwd = 2,
main = paste('Month of ',month[i]),
xlab = 'Max daily temp', ylab = 'Mean O3 ppm')
i<-i+1
}
plot(aq$Ozone~aq$Temp, main = paste('May - Sept'))
lm(Ozone~Temp, data = aq)
lm(Ozone~Temp+Month, data = aq)
summary(lm(Ozone~Temp+Month, data = aq))
summary(lm(Ozone~Temp, data = aq))
head(aq)
summary(lm(Ozone~Solar.R, data = aq))
summary(lm(Ozone~Solar.R+Temp, data = aq))
summary(lm(Ozone~Temp, data = aq))
model = lm(aq$Ozone~aq$Temp)
theta = as.numeric(model$coefficients[2]/model$coefficients[1])
theta = as.numeric(model$coefficients[2])
model = lm(aq$Ozone~aq$Temp)
theta = as.numeric(model$coefficients[2])
for(i in 1:itr){
z.new = aq[,c('Ozone','Temp')][sample(1:length(aq$Ozone),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]/model$coefficients[1]
}
bias = mean(thetas)-theta
itr       = 10000
theta     = NULL
thetas    = rep(0,itr)
set.seed(0)
model = lm(aq$Ozone~aq$Temp)
theta = as.numeric(model$coefficients[2])
for(i in 1:itr){
z.new = aq[,c('Ozone','Temp')][sample(1:length(aq$Ozone),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]/model$coefficients[1]
}
bias = mean(thetas)-theta
bias
itr       = 10000
theta     = NULL
thetas    = rep(0,itr)
set.seed(0)
model = lm(aq$Ozone~aq$Temp)
theta = as.numeric(model$coefficients[2])
for(i in 1:itr){
z.new = aq[,c('Ozone','Temp')][sample(1:length(aq$Ozone),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]
}
bias = mean(thetas)-theta
bias
theta
mean(thetas)
itr       = 10000
theta     = NULL
thetas    = rep(0,itr)
set.seed(0)
model = lm(aq$Ozone~aq$Temp)
theta = as.numeric(model$coefficients[2])
for(i in 1:itr){
z.new = aq[,c('Temp','Ozone')][sample(1:length(aq$Ozone),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]
}
bias = mean(thetas)-theta
bias
z <-aq[,c('Temp','Ozone')]
itr       = 10000
theta     = NULL
thetas    = rep(0,itr)
set.seed(0)
model = lm(z[,2]~z[,1])
theta = as.numeric(model$coefficients[2]/model$coefficients[1])
for(i in 1:itr){
z.new = z[sample(1:length(z[,1]),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]/model$coefficients[1]
}
bias = mean(thetas)-theta
z <-aq[,c('Temp','Ozone')]
itr       = 10000
theta     = NULL
thetas    = rep(0,itr)
set.seed(0)
model = lm(z[,2]~z[,1])
theta = as.numeric(model$coefficients[2])
for(i in 1:itr){
z.new = z[sample(1:length(z[,1]),replace=T),]
model = lm(z.new[,2]~z.new[,1])
thetas[i] = model$coefficients[2]
}
bias = mean(thetas)-theta
bias
print(paste('OBSERVED DATA ESTIMATE: ' ,theta))
print(paste('ESTIMATED BIAS: ' ,bias))
print(paste('BIAS-CORRECTED ESTIMATE: ' ,theta-bias  ))
coefficients(model)
summary(model)
se(model$coefficients[2])
summary(model)
2.622+0.29
2.622-0.29
quantile(thetas,probs = 0.95)
quantile(thetas,probs = 0.95)
quantile(thetas,probs = 0.025)
quantile(thetas,probs = 0.975)
model$terms
se(model)
coefficients(model)
?aq
? datasets::airquality
tinytex::install_tinytex()
